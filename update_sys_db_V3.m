%========================================================================
%       Star Update
%------------------------------------------------------------------------
% Updates star master database (with orbital elements)
%
%  it runs on a list of stars from a target list.
% The target list should be in the data folder (xls file).
% Inputs:
% 1) The last orbit data base "orbit_db_ddmmyyyy.mat" to be updated by this
% script
% 2) master_target list  -  an xls file with a list of targets and their parameters
% 3) the latest target report file "targte_rep_yyyymmdd.xls" generated by the pipeline

% The star_update  reads a solution data xxxx_sol_data.mat file from the star folders and updates the
% orbital elements  in the star data base
% The updated data base is exported as an XLS file
%
%
%
%-------------------------------------------------------------------------
% by Micha
% matlab R2014a
% matlab R2013a
% Ver 1 20 Dec 2015
% Ver 1.1 20 Jan 2016 added no. of exposure and last
% Ver 2.0 27 Jan 2016 added significance
% Ver 2.1 25/2/16 updated target list 7/5/16
% Ver 3  11/7/16 adapted to be part of the pipeline
%
%
%
%
%==========================================================================
% dbstop if caught error
clear;
close all; % close all plots




%data_path='/home/eshel-blue/micha/eshel_data';
data_path='C:\eshel_data';
addpath(data_path);
cd(data_path);
%target_list_fn='master_target_list_201215U.xls';

% target_list_fn='master_target_list_010216.xls';
target_list_fn='master_target_list.mat';
%orbit_db_fn=uigetfile('*.mat','Choose the most updated orbit_db');
orbit_db_fn='orbit_database.mat';

%orbit_db_fn='orbit_db_191215.xls';
%read orbit data base
%orbit_db=dataset('XLSFile', orbit_db_fn);
load(fullfile(data_path,orbit_db_fn),'orbit_db');

%read the target list xls file into a dataset
load(fullfile(data_path,target_list_fn),'target_list');

% load the last target report files
% [target_rep_fn,target_rep_pn]=uigetfile('*.xl?','Choose the most updated report');
% rep_list=dataset('XLSFile',fullfile(target_rep_pn,target_rep_fn));

nsys=size(target_list,1);
ndb=size(orbit_db,1);

log_file_name=['star_update_log_' datestr(now,'yyyymmddTHHMM') '.txt'];
% start diary
diary(fullfile(data_path,log_file_name)); % echo the screen to the logfile


% Display diary title
% Dispaly the target list file name
fprintf(' \n \n ************************** START **************************************\n');
fprintf('%s \n Target list file name: %s \n',mfilename,target_list_fn);
%fprintf('Target report file name: %s \n \n',target_rep_fn);
fprintf('Started on %s  \n ',datestr(now));
%
% take only those with target_list.run=1
%     target_list=target_list(target_list.run(:) == 1,:);


fprintf('Number of systems to process: %d \n',nsys);
fprintf('***********************************************************************\n');
%Start the process


%=========================================================================
% start loop on system list
%=========================================================================


for cur_target=1:nsys
    %
  try 
   
    
    obj_name=target_list.name{cur_target};
    % 
    % find the target index in the db
    cur_dbindx=find( strcmp(target_list.name(cur_target),orbit_db.Name));
    
    if isempty(cur_dbindx)
        system_is_new=true;
    else
        system_is_new=false;
        orbit_db.N_exp(cur_dbindx)=target_list.nmeas(cur_target);
        orbit_db.last(cur_dbindx)=target_list.last(cur_target);
        orbit_db.prog(cur_dbindx)=target_list.prog(cur_target);
        orbit_db.period(cur_dbindx)=target_list.period(cur_target);
    end
    obj_path = fullfile(data_path,obj_name);
    sol_path = fullfile(data_path,obj_name,'Solutions');
    
   
    
    
    sol_fn_filter='*sol_data.mat';
    
    
    % check for existence of solution file 
            a=dir(fullfile(sol_path,sol_fn_filter));            
            num_of_sol_files=size(a,1);
            
            if num_of_sol_files==0
                fprintf('No sol file in %s \n',obj_name );
                continue
                
            elseif num_of_sol_files>1
                sol_fn= a(1).name;
                
               fprintf('More than one sol file in %s - took the first one\n',obj_name);
                               
            else
                 sol_fn= a(1).name;
            end
            
            
    
    switch target_list.SBtype{cur_target}
        
        
        case 'SB1'
            
                        
            
                         
                
                load(fullfile(sol_path,sol_fn), 'Solution') ;
                
%            
                
                if system_is_new % if new add it to the db
                    fprintf('***** New system added to the db: %s \n',obj_name);
                    % create a structure to append to the data base
                   
                   % get data from the target list database
                   
                   
                    new_ent.Name=target_list.name(cur_target);
                    new_ent.SB_type=target_list.SBtype(cur_target);
                    new_ent.MSC=target_list.MSC(cur_target);
                    new_ent.prog=target_list.prog(cur_target);
                   
                    % read Sahar Solution struct
                    
                    new_ent.Nm_n=Solution.obsN;
                    new_ent.P_n=Solution.P;
                    new_ent.P_err_n =Solution.dP;
                    new_ent.e_n=Solution.e;
                    new_ent.e_err_n=Solution.de;
                    new_ent.V0_n=Solution.gamma;
                    new_ent.V0_err_n=Solution.dgamma;
                    new_ent.omega_n=Solution.omega;
                    new_ent.omega_err_n=Solution.domega;
                    new_ent.ChiSq_n=Solution.min_Chi2;
                    new_ent.K1_n=Solution.K;
                    new_ent.K1_err_n=Solution.dK;
                    new_ent.K2_n=NaN;
                    new_ent.K2_err_n=NaN;
                    
                    
                    % old orbit data is assumed unavailale and set to NaN
                    new_ent.Nm_o=NaN;
                    new_ent.P_o=NaN;
                    new_ent.P_err_o=NaN;
                    new_ent.e_o=NaN;
                    new_ent.e_err_o=NaN;
                    new_ent.V0_o=NaN;
                    new_ent.V0_err_o=NaN;
                    new_ent.omega_o=NaN;
                    new_ent.omega_err_o=NaN;
                    new_ent.K2_vo=NaN;
                    new_ent.K2_err_vo=NaN;
                    new_ent.K2_o=NaN;
                    new_ent.K2_err_o=NaN;
                    new_ent.K1_vo=NaN;
                    new_ent.K1_err_vo=NaN;
                    new_ent.K1_o=NaN;
                    new_ent.K1_err_o=NaN;
                    
                    % significance are set to NaN
                     new_ent.K1sig=NaN;
                     new_ent.K2sig=NaN;
                     new_ent.V0sig=NaN;
                     new_ent.esig=NaN;
                    
                    % auxiliary data
                    
                    new_ent.analysis_comment={[]};
                    
                    new_ent.SB9Link={[]};
                    new_ent.MSC_link={[]};
                    new_ent.es_link={[]};
                    new_ent.a_out_arcsec=NaN;
                    new_ent.P_out_yr=NaN;
                    
                    new_ent.update=cellstr(datestr(a(1).datenum,'dd/mm/yy'));
                    
                    new_ent.N_exp=target_list.nmeas(cur_target);
                    new_ent.last=target_list.last(cur_target);
                    new_ent.sys_comment=target_list.comment(cur_target);
                    new_ent.mag=target_list.mag(cur_target);
                    new_ent.sptype=target_list.type(cur_target);
                    new_ent.period=target_list.period(cur_target);
                    
                    
                    orbit_db=[orbit_db ; struct2dataset(new_ent)];
                    % delete duplicate entries - if any
                    %orbit_db=unique(orbit_db);
                    
                else % if the system is not a new entry in the database
                    % update the current system data
                    orbit_db.update{cur_dbindx}=datestr(a(1).datenum,'dd/mm/yy');
                    fprintf('Updating %s  with sol of %s \n',obj_name,orbit_db.update{cur_dbindx});
                    % read again from mastre table to allow later updates
                    orbit_db.Name(cur_dbindx)=target_list.name(cur_target);
                    orbit_db.SB_type(cur_dbindx)=target_list.SBtype(cur_target);
                    orbit_db.MSC(cur_dbindx)=target_list.MSC(cur_target);
                    orbit_db.prog(cur_dbindx)=target_list.prog(cur_target); 
                    
                    
                    orbit_db.Nm_n(cur_dbindx)=Solution.obsN;
                    orbit_db.P_n(cur_dbindx)=Solution.P;
                    orbit_db.P_err_n(cur_dbindx)=Solution.dP;
                    orbit_db.e_n(cur_dbindx)=Solution.e;
                    orbit_db.e_err_n(cur_dbindx)=Solution.de;
                    orbit_db.V0_n(cur_dbindx)=Solution.gamma;
                    orbit_db.V0_err_n(cur_dbindx)=Solution.dgamma;
                    orbit_db.omega_n(cur_dbindx)=Solution.omega;
                    orbit_db.omega_err_n(cur_dbindx)=Solution.domega;
                    orbit_db.ChiSq_n(cur_dbindx)=Solution.min_Chi2;
                    orbit_db.K1_n(cur_dbindx)=Solution.K;
                    orbit_db.K1_err_n(cur_dbindx)=Solution.dK;
                    
                    
                    
%                     orbit_db.N_exp(cur_dbindx)=rep_list.nmeas(cur_repindx);
%                     orbit_db.last(cur_dbindx)=rep_list.last(cur_repindx);

                    % update again to allow later entry of data
                    orbit_db.sys_comment(cur_dbindx)=target_list.comment(cur_target);
                    orbit_db.mag(cur_dbindx)=target_list.mag(cur_target);
                    orbit_db.sptype(cur_dbindx)=target_list.type(cur_target);
                    orbit_db.period(cur_dbindx)=target_list.period(cur_target);
                    
                    
                    orbit_db.K1sig(cur_dbindx)=(orbit_db.K1_n(cur_dbindx)-orbit_db.K1_o(cur_dbindx))...
                        /sqrt(orbit_db.K1_err_n(cur_dbindx)^2+orbit_db.K1_err_o(cur_dbindx)^2);
                    orbit_db.V0sig(cur_dbindx)=(orbit_db.V0_n(cur_dbindx)-orbit_db.V0_o(cur_dbindx))...
                        /sqrt(orbit_db.V0_err_n(cur_dbindx)^2+orbit_db.V0_err_o(cur_dbindx)^2);
                    orbit_db.esig(cur_dbindx)=(orbit_db.e_n(cur_dbindx)-orbit_db.e_o(cur_dbindx))...
                        /sqrt(orbit_db.e_err_n(cur_dbindx)^2+orbit_db.e_err_o(cur_dbindx)^2);
                    
                    
                end %if system_is_new
                
            
            
         case {'SB2','SB3'}
            % read Flavien structure
             
                       
%             % check for existence of solution file 
%              a=dir(fullfile(obj_path,sol_fn_filter));            
%             num_of_sol_files=size(a,1);
%                         if num_of_sol_files==0
%                 fprintf('No sol file in %s \n',obj_name );
%                 continue
%                 
%             elseif num_of_sol_files>1
%                 sol_fn= a(1).name;
%                 
%                fprintf('More than one sol file in %s - took the first one\n',obj_name);
%                                
%             else
%                  sol_fn= a(1).name;
%             end
%                          
                
                s=load(fullfile(sol_path,sol_fn)) ;
                % extract the date of the file and put it in the update field
                if isempty(s)
                    fprinf('could not load solution of %s \n',obj_name );
                    continue
                end
                
                if system_is_new % if new add it to the db
                    fprintf('***** New system added to the db: %s \n',obj_name);
                    % create a structure to append to the data base
                   
                   % get data from the target list database
                   
                   
                    new_ent.Name=target_list.name(cur_target);
                    new_ent.SB_type=target_list.SBtype(cur_target);
                    new_ent.MSC=target_list.MSC(cur_target);
                    new_ent.prog=target_list.prog(cur_target);
                   
                    % read Flavien solution struct ( the last struct
                    % element
                    
                    new_ent.Nm_n=s.solution(end).stats.Npts1;
                    new_ent.P_n=s.solution(end).elm.P;
                    new_ent.P_err_n =s.solution(end).err.P;
                    new_ent.e_n=s.solution(end).elm.e;
                    new_ent.e_err_n=s.solution(end).err.e;
                    new_ent.V0_n=s.solution(end).elm.gamma;
                    new_ent.V0_err_n=s.solution(end).err.gamma;
                    new_ent.omega_n=s.solution(end).elm.omega;
                    new_ent.omega_err_n=s.solution(end).err.omega;
                    new_ent.ChiSq_n=s.solution(end).stats.chi2;
                    new_ent.K1_n=s.solution(end).elm.K1;
                    new_ent.K1_err_n=s.solution(end).err.K1;
                    new_ent.K2_n=s.solution(end).elm.K2;
                    new_ent.K2_err_n=s.solution(end).err.K2;
                    
                   
                    
                    % old orbit data is assumed unavailale and set to NaN
                    new_ent.Nm_o=NaN;
                    new_ent.P_o=NaN;
                    new_ent.P_err_o=NaN;
                    new_ent.e_o=NaN;
                    new_ent.e_err_o=NaN;
                    new_ent.V0_o=NaN;
                    new_ent.V0_err_o=NaN;
                    new_ent.omega_o=NaN;
                    new_ent.omega_err_o=NaN;
                    new_ent.K1_vo=NaN;
                    new_ent.K1_err_vo=NaN;
                    new_ent.K1_o=NaN;
                    new_ent.K1_err_o=NaN;
                    new_ent.K2_vo=NaN;
                    new_ent.K2_err_vo=NaN;
                    new_ent.K2_o=NaN;
                    new_ent.K2_err_o=NaN;
                    
                    % significance are set to NaN
                     new_ent.K1sig=NaN;
                     new_ent.K2sig=NaN;
                     new_ent.V0sig=NaN;
                     new_ent.esig=NaN;
                     
                    % auxiliary data
                    % join all flavien comments into one string and put
                    % into comments
%                     new_ent.Comments=strjoin(s.solution(end).info.comments);
                    new_ent.analysis_comment=strjoin(s.solution(end).info.comments);
                    new_ent.SB9Link={[]};
                    new_ent.MSC_link={[]};
                    new_ent.a_out_arcsec=NaN;
                    new_ent.P_out_yr=NaN;
                    
                    new_ent.update=cellstr(datestr(a(1).datenum,'dd/mm/yy'));
                    
                    new_ent.N_exp=target_list.nmeas(cur_target);
                    new_ent.last=target_list.last(cur_target);
                    new_ent.sys_comment=target_list.comment(cur_target);
                    new_ent.mag=target_list.mag(cur_target);
                    new_ent.sptype=target_list.type(cur_target);
                    new_ent.period=target_list.period(cur_target);
                    
                    
                    orbit_db=[orbit_db ; struct2dataset(new_ent)];
                    % delete duplicate entries - if any
                    %orbit_db=unique(orbit_db);
                    
                else % if it is not new entry
                    % update the current system data
                    orbit_db.update{cur_dbindx}=datestr(a.datenum,'dd/mm/yy');
                    fprintf('Updating %s  with sol of %s \n',obj_name,orbit_db.update{cur_dbindx});
                    
                                        
                    orbit_db.Nm_n(cur_dbindx)=s.solution(end).stats.Npts1;
                    orbit_db.P_n(cur_dbindx)=s.solution(end).elm.P;
                    orbit_db.P_err_n(cur_dbindx)=s.solution(end).err.P;
                    orbit_db.e_n(cur_dbindx)=s.solution(end).elm.e;
                    orbit_db.e_err_n(cur_dbindx)=s.solution(end).err.e;
                    orbit_db.V0_n(cur_dbindx)=s.solution(end).elm.gamma;
                    orbit_db.V0_err_n(cur_dbindx)=s.solution(end).err.gamma;
                    orbit_db.omega_n(cur_dbindx)=s.solution(end).elm.omega;
                    orbit_db.omega_err_n(cur_dbindx)=s.solution(end).err.omega;
                    orbit_db.K1_n(cur_dbindx)=s.solution(end).elm.K1;
                    orbit_db.K1_err_n(cur_dbindx)=s.solution(end).err.K1;
                    orbit_db.K2_n(cur_dbindx)=s.solution(end).elm.K2;
                    orbit_db.K2_err_n(cur_dbindx)=s.solution(end).err.K2;
                    orbit_db.ChiSq_n(cur_dbindx)=s.solution(end).stats.chi2;
                    
                    orbit_db.N_exp(cur_dbindx)=target_list.nmeas(cur_target);
                    orbit_db.last(cur_dbindx)=target_list.last(cur_target);
                    % update again to allow later entry of data
                    orbit_db.sys_comment(cur_dbindx)=target_list.comment(cur_target);
                    orbit_db.mag(cur_dbindx)=target_list.mag(cur_target);
                    orbit_db.sptype(cur_dbindx)=target_list.type(cur_target);
                    orbit_db.period(cur_dbindx)=target_list.period(cur_target);
                    
                    
                    
                    orbit_db.K1sig(cur_dbindx)=(orbit_db.K1_n(cur_dbindx)-orbit_db.K1_o(cur_dbindx))...
                        /sqrt(orbit_db.K1_err_n(cur_dbindx)^2+orbit_db.K1_err_o(cur_dbindx)^2);
                    orbit_db.K2sig(cur_dbindx)=(orbit_db.K2_n(cur_dbindx)-orbit_db.K2_o(cur_dbindx))...
                        /sqrt(orbit_db.K2_err_n(cur_dbindx)^2+orbit_db.K2_err_o(cur_dbindx)^2);
                    orbit_db.V0sig(cur_dbindx)=(orbit_db.V0_n(cur_dbindx)-orbit_db.V0_o(cur_dbindx))...
                        /sqrt(orbit_db.V0_err_n(cur_dbindx)^2+orbit_db.V0_err_o(cur_dbindx)^2);
                    orbit_db.esig(cur_dbindx)=(orbit_db.e_n(cur_dbindx)-orbit_db.e_o(cur_dbindx))...
                        /sqrt(orbit_db.e_err_n(cur_dbindx)^2+orbit_db.e_err_o(cur_dbindx)^2);
                    
                    
                    
                    
                    
                end %if system_is_new
                
            
%         case 'SB3'
%             continue
            
        otherwise
            continue
    end %switch target_list.SBtype(cur_target)
    
    
    
    
    
    
    catch err
        fprintf('\n ???????????? Problem with reading data for: %s \n',obj_name);
        fprintf('%s  : %s \n',err.identifier,err.message);
        
   end % try
   
   
end  %  for cur_target=1:nsys

% save the updated data set mat file in the data path

save(fullfile(data_path,'orbit_database.mat'),'orbit_db');
% Save backup copies
new_orbit_db_fn=['orbit_db_' datestr(now,'ddmmyyyy')];
save(fullfile(data_path,new_orbit_db_fn),'orbit_db'); % backup file
export(orbit_db,'XLSfile', fullfile(data_path,...
    ['orbit_db_' datestr(now,'ddmmyyyy')]));%backupfile

sav_time=datestr(now, 'dd/mm/yy HH:MM');
fprintf('Update ended at %s Orbit db backup saved in %s \n',...
    sav_time,fullfile(data_path, new_orbit_db_fn)); 

diary off;






